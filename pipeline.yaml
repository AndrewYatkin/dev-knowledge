stages:          # List of stages for jobs, and their order of execution
  - lint
  - build
  - test
  - deploy


variables:
  DOCKER_REGISTRY: cr.selcloud.ru/studygo
  SERVICE_NAME: $CI_PROJECT_NAME   #Имя проекта
  USERNAME: $GITLAB_USER_LOGIN    #Имя под пользователя под кем запускаем
  IMAGE_NAME: ${DOCKER_REGISTRY}/${USERNAME}-${SERVICE_NAME}
  ENVIRONMENT_URL: $USERNAME-$SERVICE_NAME.dbdev.pro
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

lint:
  stage: lint
  image: golang:latest  # Используйте официальный образ Go
  script:
    - echo "Запуск go fmt для проверки кода..."
    - go fmt -l .  # Проверка форматирования кода
    - echo "Установка golint..."
    - go install golang.org/x/lint/golint@latest  # Установка golint
    - echo "Запуск golint для проверки стиля кода..."
    - golint ./...  # Запуск golint на всем проекте
  only:
    - merge_requests  # Выполнение только для MR


# #------------------------------------------------------------#

#-------------------------------------------------------------BUILD------------------------------------------------------------#
build:
  rules:
    - if: $CI_COMMIT_BRANCH
  image: docker:20.10.17
  stage: build
  tags:
    - k8s
    - backend
  services:
    - name: docker:dind
      alias: docker
      command: [ "--tls=false" ]
  before_script:
    - docker login cr.selcloud.ru -u token -p $DOCKER_CONFIG_TOKEN
  script:
    - ORANGE='\033[0;33m' && NC='\033[0m' && echo -e "${ORANGE}Starting build image $IMAGE_NAME ${NC}\n"
    - docker build
      --build-arg BUILDKIT_INLINE_CACHE=1
      --cache-from $IMAGE_NAME:${CI_COMMIT_REF_SLUG}_latest
      -t $IMAGE_NAME:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}
      -t $IMAGE_NAME:${CI_COMMIT_REF_SLUG}_latest
      "."
    - ORANGE='\033[0;33m' && NC='\033[0m' && echo -e "${ORANGE}Starting push tags for $IMAGE_NAME:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA} & $IMAGE_NAME:${CI_COMMIT_REF_SLUG}_latest${NC} \n"
    - docker push --all-tags $IMAGE_NAME
  interruptible: true

# unit-test:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - echo "Code coverage is $((RANDOM % 99 + 1))%"

deploy:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  id_tokens:
    VAULT_TOKEN:
      aud: https://vault.dbdev.pro
  variables:
    NAMESPACE: study-$USERNAME-$SERVICE_NAME
    VAULT_ROLE: gitlab
    VAULT_ADDR: https://vault.dbdev.pro
  image: soaron/helm-kubectl-vault:1.0.0
  environment:
    name: $CI_COMMIT_REF_NAME
    url: https://$ENVIRONMENT_URL
  before_script:
    #---------------------------------VAULT-----------------------------------------####
    # # Формируем переменную волт токен, через jwt gitlab)
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=${VAULT_ROLE} jwt=$VAULT_TOKEN)"
    # Получаем динамические и статические переменные
    - vault kv get -field=values studygo/base > values.yaml
    - cat values.yaml
    # Получение переменных из списка key:value из директории в vault
    - vault kv get -format=json studygo/$GROUP/$SERVICE_NAME > vault-data.json || true
    - cat vault-data.json
    - for VARNAME in $(cat vault-data.json | jq .data | jq -r 'to_entries | .[] | "env." + .key + "=" + .value'); do
      ENVSECRETS="${ENVSECRETS} --set $VARNAME" || true;
      done
    # Читаем переменные из develop.env и преобразуем их в строку для --set
    - ENVVARS=$(cat gitlab/app.env | sed 's/^/env./' | tr '\n' ',' | sed 's/,$//')
    - echo $ENVVARS
    #-----------------------------------KUBERNETES-----------------------------------####
    # # Получаем значения переменных для авторизации в кластере k8s из vault
    - export K8S_TOKEN=$K8S_TOKEN
    - export K8S_URL=$K8S_URL
    # Параметры авторизации в кластере
    - kubectl config set-cluster k8s --server="$K8S_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token="$K8S_TOKEN"
    - kubectl config set-context default --cluster=k8s --user=admin --namespace=$NAMESPACE
    - kubectl config use-context default
    # Добавляем helm чарт registry
    - helm repo add studygo --username templateproject-studygo --password gldt-64uou2KyzaaLvBJhuzfz ${CI_API_V4_URL}/projects/140/packages/helm/stable  #https://gitlab.dbdev.pro/study-go/template-project/-/packages
  script:
    - ORANGE='\033[0;33m' && NC='\033[0m' && echo -e "${ORANGE}Starting deploy image for $IMAGE_NAME:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}${NC} \n"
    - helm upgrade --create-namespace --debug --namespace $NAMESPACE --install $SERVICE_NAME studygo/auctions-chart --set image.repository=$DOCKER_REGISTRY/
      --set image.tag=${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA} --set image.name=$USERNAME-$SERVICE_NAME
      --set ingress.tls[0].hosts[0]=$USERNAME-$SERVICE_NAME.dbdev.pro
      --set ingress.tls[0].secretName=$USERNAME-$SERVICE_NAME-tls
      --set ingress.hosts[0].host=$USERNAME-$SERVICE_NAME.dbdev.pro -f values.yaml $ENVSECRETS --set $ENVVARS --atomic
    - echo "Application successfully deployed."


stop_environment:
  image: soaron/helm-kubectl-vault:1.0.0
  when: manual
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  variables:
    NAMESPACE: study-$USERNAME-$SERVICE_NAME
  script:
    #-----------------------------------KUBERNETES-----------------------------------####
    # # Получаем значения переменных для авторизации в кластере k8s из vault
    - export K8S_TOKEN=$K8S_TOKEN
    - export K8S_URL=$K8S_URL
    # Параметры авторизации в кластере
    - kubectl config set-cluster k8s --server="$K8S_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token="$K8S_TOKEN"
    - kubectl config set-context default --cluster=k8s --user=admin --namespace=$NAMESPACE
    - kubectl config use-context default
    ######### УДАЛЯЕМ НЕЙМСПЕЙС И ОБЪЕКТЫ В НЁМ
    - kubectl delete namespace $NAMESPACE
  environment:
    name: $CI_COMMIT_REF_NAME
    action: stop
